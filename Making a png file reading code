#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

struct pngheader {
    uint8_t pngsignature[8];
} header;

struct imageheader {
    uint8_t png_header[13];
} ihdr;

long long hexToDecimal(char hex[]);

int pngsig(FILE *fp) {

	uint8_t png_signature[8] = {0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A};

    fread(header.pngsignature, 8, 1, fp);

    if (memcmp(header.pngsignature, png_signature, 8) == 0) {
        return 1; 
    } else {
        return 0; 
    }
};

int imgheader(FILE *fp) {
    uint8_t png_header[25];
    char hex_buffer[3];

    fread(png_header, 25, 1, fp);

    printf("PNG image is ");

        sprintf(hex_buffer, "%02X", png_header[11]);
        long long width = hexToDecimal(hex_buffer);
        printf("%02lld ", width);
        printf("pixel wide");

    printf("\n");

        printf("PNG image is ");
    
        sprintf(hex_buffer, "%02X", png_header[15]);
        long long height = hexToDecimal(hex_buffer);
        printf("%02lld ", height);
        printf("pixel high");

    printf("\n");

        printf("PNG image has ");
    
        sprintf(hex_buffer, "%02X", png_header[16]);
        long long Bits_per_pixel = hexToDecimal(hex_buffer);
        printf("%02lld ", Bits_per_pixel);
        printf("Bits per pixel");

    printf("\n");

    printf("PNG image uses ");
    
        sprintf(hex_buffer, "%02X", png_header[17]);
        long long colourtype = hexToDecimal(hex_buffer);
        printf("%02lld ", colourtype);
        printf("colour type");

    printf("\n");

        printf("PNG image uses ");
    
        sprintf(hex_buffer, "%02X", png_header[18]);
        long long compressionmethod = hexToDecimal(hex_buffer);
        printf("%02lld ", compressionmethod);
        printf("compression method(only accepted value)");

    printf("\n");

        printf("PNG image uses ");
        sprintf(hex_buffer, "%02X", png_header[19]);
        long long filtermethod = hexToDecimal(hex_buffer);
        printf("%02lld ", filtermethod);
        printf("filtermethod(only accepted value)");
}

int main() {
    FILE *fp;
    int result, bytes_read;

    fp = fopen("C:\\Users\\uddha\\OneDrive\\Pictures\\guess1.png", "rb+");
    if (fp == NULL) {
        printf("Failed to open file\n");
        return 1;
    }

    result = pngsig(fp); 
    if (result=1) {
        printf("This is a PNG file\n");
    } else {
        printf("This is not a PNG file\n");
    }

	imgheader(fp);

    fclose(fp);

    return 0;
}

long long hexToDecimal(char hex[]) {
long long decimal = 0, base = 1;
    int i = 0, value, length;

    // find the length of the hexadecimal number
    length = strlen(hex);
    length--;

    // convert hexadecimal to decimal
    for (i = 0; hex[i] != '\0'; i++) {
        if (hex[i] >= '0' && hex[i] <= '9') {
            value = hex[i] - 48;
        }
        else if (hex[i] >= 'a' && hex[i] <= 'f') {
            value = hex[i] - 97 + 10;
        }
        else if (hex[i] >= 'A' && hex[i] <= 'F') {
            value = hex[i] - 65 + 10;
        }
        decimal += value * pow(16, length);
        length--;
    }

    return decimal;
}

